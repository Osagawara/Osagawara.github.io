{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"Largest Number","text":"题目给定一个非负整数的列表，将它们排序之后首尾相连得到一个整数，返回可得的最大整数 Example 1:Input: [10,2]Output: “210” Example 2:Input: [3,30,34,5,9]Output: “9534330” 解答先将整数列表转化为字符串列表，再进行排序。 一般情况，对于两个整数字符串a和b，如果将a排在前面会使结果更大，则a的字典序一定比b大，可以直接使用&gt;和&lt;来进行比较。 特殊情况，a是b的前缀，则b的字典序一定比a大，但此时b不总是排在a的前面。对于'998'和'99899'，有'99899' &gt; '998'。但是对于'338'和'33833'，我们必须确保'338' &gt; '33833'，这与python3内置比较相反。因此我们需要自定义一个用于排序的比较函数。 不妨设a是b的前缀，由于两者前面相同，则需要对a和b的除去前缀的部分进行比较，也即比较a和b[len(a):]。如果b[len(a):] &gt; a，则b &gt; a；如果b[len(a):] &lt; a，则b &lt; a。此外，有一种特殊情况，最后a或b可能为空串，说明a和b都是由相同的子串（不同数量）拼接而成，这时返回相等。最终自定义的比较函数如下。 12345678910111213141516171819def cmp_str(a, b): if a == &apos;&apos; or b == &apos;&apos;: return 0 la = len(a) lb = len(b) if la &lt;= lb and a == b[:la]: return cmp_str(a, b[la:]) if la &gt; lb and a[:lb] == b: return cmp_str(a[lb:], b) if a &gt; b: return 1 elif a == b: return 0 else: return -1 对于排序，functools.cmp_to_key可以将比较函数转化为key参数，输入到sort()中。","link":"/2019/07/15/Largest-Number/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/07/14/hello-world/"}],"tags":[{"name":"日本","slug":"日本","link":"/tags/日本/"},{"name":"首相","slug":"首相","link":"/tags/首相/"},{"name":"Sort","slug":"Sort","link":"/tags/Sort/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"}],"categories":[{"name":"日本","slug":"日本","link":"/categories/日本/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"},{"name":"首相","slug":"日本/首相","link":"/categories/日本/首相/"},{"name":"Sort","slug":"LeetCode/Sort","link":"/categories/LeetCode/Sort/"}]}